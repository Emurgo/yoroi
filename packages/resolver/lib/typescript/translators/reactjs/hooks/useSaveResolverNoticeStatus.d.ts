import { UseMutationOptions } from 'react-query';
export declare const useSaveResolverNoticeStatus: (options?: UseMutationOptions<void, Error, boolean>) => {
    saveResolverNoticeStatus: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    data: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isLoading: false;
    isSuccess: false;
    status: "idle";
    mutate: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: boolean | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<void, Error, boolean, unknown>;
} | {
    saveResolverNoticeStatus: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    data: undefined;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: true;
    isSuccess: false;
    status: "loading";
    mutate: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: boolean | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<void, Error, boolean, unknown>;
} | {
    saveResolverNoticeStatus: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    data: undefined;
    error: Error;
    isError: true;
    isIdle: false;
    isLoading: false;
    isSuccess: false;
    status: "error";
    mutate: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: boolean | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<void, Error, boolean, unknown>;
} | {
    saveResolverNoticeStatus: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    data: void;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: false;
    isSuccess: true;
    status: "success";
    mutate: import("react-query").UseMutateFunction<void, Error, boolean, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: boolean | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<void, Error, boolean, unknown>;
};
//# sourceMappingURL=useSaveResolverNoticeStatus.d.ts.map