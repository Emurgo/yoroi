name: Tests

on:
  pull_request_review:
    types: [submitted]

jobs:
  Android_tests:
    if: github.event.review && (github.event.review.state == 'approved' || contains(github.event.review.body, '/check'))
    runs-on: [self-hosted]
    steps:
      - name: Preparing SSH key
        run: |
          CURRENT_DIR=$(pwd)
          cd ~
          mkdir .ssh && cd .ssh
          echo ${{ secrets.SSH_KEY }} | base64 -d > id_rsa
          sudo chmod 600 $(pwd)/id_rsa
          cd $CURRENT_DIR

      - name: Installing help tools
        run: sudo apt-get install build-essential curl wget unzip awscli -y

      - name: Installing Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . $HOME/.cargo/env

      - name: Installing Rust toolchain
        run: |
          . $HOME/.cargo/env
          rustup toolchain install 1.41.0 
          rustup install 1.41.0 
          rustup target add wasm32-unknown-unknown --toolchain 1.41.0
          rustup default 1.41.0
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Installing WASM
        run: |
          . $HOME/.cargo/env
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Installin JDK 11
        run: |
          sudo apt-get update && apt-get install openjdk-11-jdk -y
          update-alternatives --config java

      - name: Installing Python 2.7
        run: |
          sudo apt-get install python2 -y
          sudo ln -sf /usr/bin/python2 /usr/bin/python

      - name: Installing Android SDK
        run: |
          mkdir -p $HOME/Android/Sdk
          wget https://dl.google.com/android/repository/commandlinetools-linux-9123335_latest.zip
          unzip commandlinetools-linux-9123335_latest.zip -d $HOME/Android/Sdk
          export ANDROID_SDK_ROOT=$HOME/Android/Sdk
          yes | $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "tools"
          $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "build-tools;30.0.2" "platform-tools" "platforms;android-30" "tools"
          export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
          export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools
          export PATH=$PATH:$ANDROID_HOME/bin
          yes | $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --licenses
      
      - name: Installing NDK 21.4.7075529
        run: $ANDROID_SDK_ROOT/tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install "ndk;21.4.7075529"

      - name: Installing Gradle
        run: sudo apt-get install gradle -y

      - uses: actions/checkout@v3

      - name: Reading .nvmrc
        id: nvm
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'
          cache: 'yarn'

      - name: Installing project dependencies
        run: yarn install

      - name: Adding android/gradle.properties.local
        run: |
          cat <<EOF > android/gradle.properties.local
          MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_PASSWORD }}
          MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_PASSWORD }}
          EOF

      - name: Adding .env.nightly
        run: |
          cat <<EOF > .env.nightly
          BUILD_VARIANT=NIGHTLY
          SHOW_INIT_DEBUG_SCREEN=false
          PREFILL_WALLET_INFO=false
          USE_TESTNET=false
          SENTRY=${{ secrets.SENTRY_KEY }}
          COMMIT=XXXXXXX
          EOF

      - name: Getting the latest commit hash
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          if [ -z "$COMMIT_HASH" ]; then
            echo "ERROR: Couldn't get last commit hash"
            COMMIT_HASH="-"
          fi
          sed -i "s/XXXXXXX/$COMMIT_HASH/g" .env.nightly

      - name: Setting up cargo config
        run: |
          cat <<EOF >> ~/.cargo/config
          [net]
          git-fetch-with-cli = true
          EOF

      - name: Adding android/sentry.properties
        run: |
          cat <<EOF > android/sentry.properties
          defaults.url=https://sentry.io/
          defaults.org=emurgo
          defaults.project=yoroi-mobile
          auth.token=${{ secrets.SENTRY_AUTH_TOKEN }}
          EOF

      - name: Adding android/app/my-release-key.keystore
        run: echo ${{ secrets.RELEASE_KEY }} | base64 -d > android/app/my-release-key.keystore

      - name: Building the nightly app
        run: |
          . $HOME/.cargo/env
          cd android
          ENTRY_FILE=index.ts ./gradlew clean assembleNightlyRelease
          cd ..

      - name: Copy the apk to test folder
        run: |
          mkdir "$(pwd)/tests/app"
          cp "$(pwd)/android/app/build/outputs/apk/nightly/release/app-nightly-release.apk" "$(pwd)/tests/app/Yoroi-Nightly.apk"
      
      - name: Create avd image
        run: $ANDROID_SDK_ROOT/tools/bin/avdmanager create avd -n test -k "system-images;android-31;google_apis;x86_64" --device "pixel_6"

      - name: Run Android emulator
        run: |
          nohup emulator -avd test -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none &
          sleep(60)

      - name: Installing Appium
        run: yarn global add appium

      - name: Run tests
        run: yarn e2e:appium-test-android

      - name: Kill emulator
        run: |
          EMULATOR_PID=$(ps -A | grep -w qemu-system-x86 | grep -Po "(?<=^\s)[0-9]+")
          sudo kill $EMULATOR_PID
