/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull mobile'
 *
 * Required dependencies: @amplitude/analytics-react-native@^0.4.0, @react-native-async-storage/async-storage@^1.17.9
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: react-native:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/emurgo/Yoroi/implementation/mobile)
 */

import * as amplitude from '@amplitude/analytics-react-native';

export type ReactNativeClient = amplitude.Types.ReactNativeClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
export type ReactNativeOptions = amplitude.Types.ReactNativeOptions;

export type Environment = 'production' | 'development' | 'staging';

export const ApiKey: Record<Environment, string> = {
  production: 'd44950b777177c2ebee5f21f194c1231',
  development: '52a980fd5fb8da5fc680687d7e991e18',
  staging: '53e9e81ab1b50d726a692b81f29a0403'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: ReactNativeOptions = {
  plan: {
    version: '1',
    branch: 'main',
    source: 'mobile',
    versionId: 'ce2da771-0fdc-498c-b5eb-e45fe69831fd'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'react-native-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: ReactNativeOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: ReactNativeOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: ReactNativeClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface NftGalleryDetailsTabProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Overview, Metadata |
   */
  nft_tab: "Overview" | "Metadata";
}

export interface NftGalleryPageViewedProperties {
  /**
   * The total number of NFT's that an user have
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  nft_count: number;
}

export interface NftGallerySearchActivatedProperties {
  /**
   * The total number of NFT's that an user have
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  nft_count: number;
  /**
   * What user is looking to search on NFT gallery page
   */
  nft_search_term: string;
}

export interface SendSelectAssetSelectedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  nfts?: string[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  tokens?: string[];
}

export interface SendSelectAssetUpdatedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  nfts: string[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  tokens: string[];
}

export interface SendSummaryPageViewedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  nfts: string[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  tokens: string[];
}

export interface SendSummarySubmittedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  nfts: string[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  tokens: string[];
}

export interface SwapAssetFromChangedProperties {
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  from_asset: string;
}

export interface SwapAssetToChangedProperties {
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: string;
}

export interface SwapCancelationSubmittedProperties {
  /**
   * The amount of asset that the user is swapping from
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  from_amount: number;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  from_asset: string;
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees: number;
  /**
   * The amount of asset that the user is swapping to
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  to_amount: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: string;
}

export interface SwapInitiatedProperties {
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  from_asset: string;
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type: "limit" | "market";
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: string;
}

export interface SwapOrderSelectedProperties {
  /**
   * The amount of asset that the user is swapping from
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  from_amount: number;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  from_asset: string;
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees: number;
  /**
   * The amount of asset that the user is swapping to
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  to_amount: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: string;
}

export interface SwapOrderSubmittedProperties {
  /**
   * The amount of asset that the user is swapping from
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  from_amount: number;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  from_asset: string;
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees: number;
  /**
   * The amount of asset that the user is swapping to
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  to_amount: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: string;
}

export interface SwapSlippageChangedProperties {
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
}

export interface SendProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  nfts?: string[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  tokens?: string[];
}

export interface SwapProperties {
  /**
   * The amount of asset that the user is swapping from
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  from_amount: number;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  from_asset: string;
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees: number;
  /**
   * The amount of asset that the user is swapping to
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  to_amount: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: string;
}

export class NftGalleryDetailsPageViewed implements BaseEvent {
  event_type = 'NFT Gallery Details Page Viewed';
}

export class NftGalleryDetailsTab implements BaseEvent {
  event_type = 'NFT Gallery Details Tab';

  constructor(
    public event_properties: NftGalleryDetailsTabProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class NftGalleryPageViewed implements BaseEvent {
  event_type = 'NFT Gallery Page Viewed';

  constructor(
    public event_properties: NftGalleryPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class NftGallerySearchActivated implements BaseEvent {
  event_type = 'NFT Gallery Search Activated';

  constructor(
    public event_properties: NftGallerySearchActivatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendInitiated implements BaseEvent {
  event_type = 'Send Initiated';
}

export class SendSelectAssetPageViewed implements BaseEvent {
  event_type = 'Send Select Asset Page Viewed';
}

export class SendSelectAssetSelected implements BaseEvent {
  event_type = 'Send Select Asset Selected';

  constructor(
    public event_properties: SendSelectAssetSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendSelectAssetUpdated implements BaseEvent {
  event_type = 'Send Select Asset Updated';

  constructor(
    public event_properties: SendSelectAssetUpdatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendSummaryPageViewed implements BaseEvent {
  event_type = 'Send Summary Page Viewed';

  constructor(
    public event_properties: SendSummaryPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendSummarySubmitted implements BaseEvent {
  event_type = 'Send Summary Submitted';

  constructor(
    public event_properties: SendSummarySubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapAssetFromChanged implements BaseEvent {
  event_type = 'Swap Asset From Changed';

  constructor(
    public event_properties: SwapAssetFromChangedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapAssetToChanged implements BaseEvent {
  event_type = 'Swap Asset To Changed';

  constructor(
    public event_properties: SwapAssetToChangedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapCancelationSubmitted implements BaseEvent {
  event_type = 'Swap Cancelation Submitted';

  constructor(
    public event_properties: SwapCancelationSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapConfirmedPageViewed implements BaseEvent {
  event_type = 'Swap Confirmed  Page Viewed';
}

export class SwapInitiated implements BaseEvent {
  event_type = 'Swap Initiated';

  constructor(
    public event_properties: SwapInitiatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapOrderSelected implements BaseEvent {
  event_type = 'Swap Order Selected';

  constructor(
    public event_properties: SwapOrderSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapOrderSubmitted implements BaseEvent {
  event_type = 'Swap Order Submitted';

  constructor(
    public event_properties: SwapOrderSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapPoolChanged implements BaseEvent {
  event_type = 'Swap Pool Changed';
}

export class SwapSlippageChanged implements BaseEvent {
  event_type = 'Swap Slippage Changed';

  constructor(
    public event_properties: SwapSlippageChangedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: ReactNativeClient;

  get client(): ReactNativeClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already initialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();

    return this.amplitude!.identify(amplitudeIdentify, options);
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * Flush pending events.
   */
  flush(): PromiseResult<void> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * NFT Gallery Details Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Details%20Page%20Viewed)
   *
   * This event tracks when a user views the details page of an NFT item.
   *
   * @param options Amplitude event options.
   */
  nftGalleryDetailsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryDetailsPageViewed(), options);
  }

  /**
   * NFT Gallery Details Tab
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Details%20Tab)
   *
   * This event tracks user interactions with the tab in the NFT Gallery details page. It provides insights into how users engage with specific details of NFTs, such as descriptions, attributes, or additional information
   *
   * @param properties The event's properties (e.g. nft_tab)
   * @param options Amplitude event options.
   */
  nftGalleryDetailsTab(
    properties: NftGalleryDetailsTabProperties,
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryDetailsTab(properties), options);
  }

  /**
   * NFT Gallery Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Page%20Viewed)
   *
   * This event tracks when the NFT gallery it has loaded all nfts metadata
   *
   * @param properties The event's properties (e.g. nft_count)
   * @param options Amplitude event options.
   */
  nftGalleryPageViewed(
    properties: NftGalleryPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryPageViewed(properties), options);
  }

  /**
   * NFT Gallery Search Activated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Search%20Activated)
   *
   * User activates and starts a search in the NFT gallery. Delay of 0.5 seconds.
   *
   * @param properties The event's properties (e.g. nft_count)
   * @param options Amplitude event options.
   */
  nftGallerySearchActivated(
    properties: NftGallerySearchActivatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new NftGallerySearchActivated(properties), options);
  }

  /**
   * Send Initiated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Initiated)
   *
   * This event tracks when a user loads the default state of the first step of the multiasset transaction flow. That screen shows receiver address and optional memo
   *
   * @param options Amplitude event options.
   */
  sendInitiated(
    options?: EventOptions,
  ) {
    return this.track(new SendInitiated(), options);
  }

  /**
   * Send Select Asset Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Select%20Asset%20Page%20Viewed)
   *
   * This event tracks when a user views the "Amount" page in the send flow.
   *
   * @param options Amplitude event options.
   */
  sendSelectAssetPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new SendSelectAssetPageViewed(), options);
  }

  /**
   * Send Select Asset Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Select%20Asset%20Selected)
   *
   * When a user click "next" on the send flow: "Amount" step on extension / "Assets added" in mobile
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSelectAssetSelected(
    properties: SendSelectAssetSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSelectAssetSelected(properties), options);
  }

  /**
   * Send Select Asset Updated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Select%20Asset%20Updated)
   *
   * When an user update the tokens selection on "amount" step: 
   *  \- Add 
   *  \- Remove 
   *  \- Updated
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSelectAssetUpdated(
    properties: SendSelectAssetUpdatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSelectAssetUpdated(properties), options);
  }

  /**
   * Send Summary Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Summary%20Page%20Viewed)
   *
   * When a user loads the Preview page (Could be called comfirmation too) on the send flow.
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSummaryPageViewed(
    properties: SendSummaryPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSummaryPageViewed(properties), options);
  }

  /**
   * Send Summary Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Summary%20Submitted)
   *
   * When a user click "send" on the "Preview" step on the send flow.
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSummarySubmitted(
    properties: SendSummarySubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSummarySubmitted(properties), options);
  }

  /**
   * Swap Asset From Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Asset%20From%20Changed)
   *
   * When user changed the selected asset on "From" section
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_asset)
   * @param options Amplitude event options.
   */
  swapAssetFromChanged(
    properties: SwapAssetFromChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapAssetFromChanged(properties), options);
  }

  /**
   * Swap Asset To Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Asset%20To%20Changed)
   *
   * When user changed the selected asset on "To" section
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. to_asset)
   * @param options Amplitude event options.
   */
  swapAssetToChanged(
    properties: SwapAssetToChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapAssetToChanged(properties), options);
  }

  /**
   * Swap Cancelation Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Cancelation%20Submitted)
   *
   * When user sign a transaction to cancel the swap order
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_amount)
   * @param options Amplitude event options.
   */
  swapCancelationSubmitted(
    properties: SwapCancelationSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapCancelationSubmitted(properties), options);
  }

  /**
   * Swap Confirmed  Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Confirmed%20%20Page%20Viewed)
   *
   * When the user opens Completed Order page
   *
   * Owner: Omar Rozak
   *
   * @param options Amplitude event options.
   */
  swapConfirmedPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new SwapConfirmedPageViewed(), options);
  }

  /**
   * Swap Initiated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Initiated)
   *
   * When user clicks on the swap feature and sees the default state of the swap.
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_asset)
   * @param options Amplitude event options.
   */
  swapInitiated(
    properties: SwapInitiatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapInitiated(properties), options);
  }

  /**
   * Swap Order Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Order%20Selected)
   *
   * When user click on "swap" button after selecting asset from, entering the amount of asset form, selecting asset to, entering amount of asset to, and choosing a pool
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_amount)
   * @param options Amplitude event options.
   */
  swapOrderSelected(
    properties: SwapOrderSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapOrderSelected(properties), options);
  }

  /**
   * Swap Order Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Order%20Submitted)
   *
   * When user click confirm on the check out page, after entering their spending password
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_amount)
   * @param options Amplitude event options.
   */
  swapOrderSubmitted(
    properties: SwapOrderSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapOrderSubmitted(properties), options);
  }

  /**
   * Swap Pool Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Pool%20Changed)
   *
   * When user clicked a different pool on the "Select Pool" page
   *
   * Owner: Sergio SF
   *
   * @param options Amplitude event options.
   */
  swapPoolChanged(
    options?: EventOptions,
  ) {
    return this.track(new SwapPoolChanged(), options);
  }

  /**
   * Swap Slippage Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Slippage%20Changed)
   *
   * When user click apply on the swap setting page
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. slippage_tolerance)
   * @param options Amplitude event options.
   */
  swapSlippageChanged(
    properties: SwapSlippageChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapSlippageChanged(properties), options);
  }
}

export const ampli = new Ampli();
