/* tslint:disable */
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull mobile'
 *
 * Required dependencies: @amplitude/analytics-react-native@^0.4.0, @react-native-async-storage/async-storage@^1.17.9
 * Tracking Plan Version: 7
 * Build: 1.0.0
 * Runtime: react-native:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/emurgo/Yoroi/implementation/mobile)
 */

import * as amplitude from '@amplitude/analytics-react-native';

export type ReactNativeClient = amplitude.Types.ReactNativeClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
export type ReactNativeOptions = amplitude.Types.ReactNativeOptions;

export type Environment = 'production' | 'development';

export const ApiKey: Record<Environment, string> = {
  production: 'd44950b777177c2ebee5f21f194c1231',
  development: '52a980fd5fb8da5fc680687d7e991e18'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: ReactNativeOptions = {
  plan: {
    version: '7',
    branch: 'main',
    source: 'mobile',
    versionId: 'a0985241-d0c0-4bda-bc6d-271830af0067'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'react-native-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: ReactNativeOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: ReactNativeOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: ReactNativeClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface CreateWalletVerifyPhraseWordSelectedProperties {
  recovery_word_order?: any;
}

export interface DiscoverFilterSelectedProperties {
  /**
   * Describe the dApp filters on the discover page.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Investment, Media, Trading, NFT, Community |
   */
  dapp_filter: "Investment" | "Media" | "Trading" | "NFT" | "Community";
}

export interface DiscoverSearchActivatedProperties {
  /**
   * What a user is looking to search.
   */
  search_term: string;
}

export interface DiscoverWebViewToolbarSearchActivatedProperties {
  /**
   * What a user is looking to search.
   */
  search_term: string;
}

export interface ExchangeSubmittedProperties {
  /**
   * The amount of ADA that the user will be exchanging.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  ada_amount: number;
  /**
   * The type of ramp selected on a given transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Buy, Sell |
   */
  ramp_type: "Buy" | "Sell";
}

export interface GovernanceConfirmTransactionPageViewedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Delegate, Abstain, No Confidence |
   */
  governance_selection: "Delegate" | "Abstain" | "No Confidence";
}

export interface GovernanceTransactionSuccessPageViewedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Delegate, Abstain, No Confidence |
   */
  governance_selection: "Delegate" | "Abstain" | "No Confidence";
}

export interface NetworkSelectedProperties {
  /**
   * Current network
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | preprod, preview, mainnet, sancho |
   */
  from_network: "preprod" | "preview" | "mainnet" | "sancho";
  /**
   * Network selected
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | preprod, preview, mainnet, sancho |
   */
  to_network: "preprod" | "preview" | "mainnet" | "sancho";
}

export interface NftGalleryDetailsTabProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Overview, Metadata |
   */
  nft_tab: "Overview" | "Metadata";
}

export interface NftGalleryPageViewedProperties {
  /**
   * The total number of NFT's that an user have
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  nft_count: number;
}

export interface NftGallerySearchActivatedProperties {
  /**
   * The total number of NFT's that an user have
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  nft_count: number;
  /**
   * What user is looking to search on NFT gallery page
   */
  nft_search_term: string;
}

export interface PortfolioTokenDetailsProperties {
  /**
   * It show what tab from the Token details the user is.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Performance, Overview, Transactions |
   */
  token_details_tab: "Performance" | "Overview" | "Transactions";
}

export interface PortfolioTokensListPageViewedProperties {
  /**
   * It shows in what tab are we in the movile version of the Token list
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Wallet Token, Dapps Token |
   */
  tokens_tab: "Wallet Token" | "Dapps Token";
}

export interface PortfolioTokensListSearchActivatedProperties {
  /**
   * What a user is looking to search.
   */
  search_term: string;
}

export interface ReceiveAmountGeneratedPageViewedProperties {
  /**
   * The amount of ADA that the user will be exchanging.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  ada_amount: number;
}

export interface ReceiveCopyAddressClickedProperties {
  /**
   * Indicates the location of cop CTA
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | CTA Copy Address, Tap Address Details, Long Press wallet Address |
   */
  copy_address_location: "CTA Copy Address" | "Tap Address Details" | "Long Press wallet Address";
}

export interface RestoreWalletEnterPhraseStepStatusProperties {
  recovery_prhase_status: boolean;
}

export interface RestoreWalletEnterPhraseStepViewedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | 15, 24 |
   */
  recovery_phrase_lenght: "15" | "24";
}

export interface SendSelectAssetSelectedProperties {
  /**
   * Total numbers of assets to be send
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   */
  nfts?: any[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   */
  tokens?: any[];
}

export interface SendSelectAssetUpdatedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   */
  nfts?: any[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   */
  tokens?: any[];
}

export interface SendSummaryPageViewedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   */
  nfts?: any[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   */
  tokens?: any[];
}

export interface SendSummarySubmittedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   */
  nfts?: any[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   */
  tokens?: any[];
}

export interface SwapAssetFromChangedProperties {
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name Asset Ticker Policy ID
   *  \[
   *   {
   *     asset_name: 'ADA',
   *     asset_ticker: 'ADA',
   *     policy_id: '123456789'
   *   },
   * \]
   */
  from_asset: any[];
}

export interface SwapAssetToChangedProperties {
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: any[];
}

export interface SwapCancelationSubmittedProperties {
  /**
   * The amount of asset that the user is swapping from
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  from_amount: number;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name Asset Ticker Policy ID
   *  \[
   *   {
   *     asset_name: 'ADA',
   *     asset_ticker: 'ADA',
   *     policy_id: '123456789'
   *   },
   * \]
   *
   * | Rule | Value |
   * |---|---|
   * | Unique Items | null |
   */
  from_asset: any[];
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The amount of asset that the user is swapping to
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  to_amount: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   *
   * | Rule | Value |
   * |---|---|
   * | Unique Items | null |
   */
  to_asset: any[];
}

export interface SwapConfirmedPageViewedProperties {
  /**
   * Define the tab that is active in the selected page
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Open Orders, Completed Orders |
   */
  swap_tab: "Open Orders" | "Completed Orders";
}

export interface SwapInitiatedProperties {
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name Asset Ticker Policy ID
   *  \[
   *   {
   *     asset_name: 'ADA',
   *     asset_ticker: 'ADA',
   *     policy_id: '123456789'
   *   },
   * \]
   *
   * | Rule | Value |
   * |---|---|
   * | Unique Items | null |
   */
  from_asset: any[];
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type: "limit" | "market";
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   *
   * | Rule | Value |
   * |---|---|
   * | Unique Items | null |
   */
  to_asset: any[];
}

export interface SwapOrderSelectedProperties {
  /**
   * The amount of asset that the user is swapping from
   */
  from_amount: string;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name Asset Ticker Policy ID
   *  \[
   *   {
   *     asset_name: 'ADA',
   *     asset_ticker: 'ADA',
   *     policy_id: '123456789'
   *   },
   * \]
   */
  from_asset: any[];
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type?: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance?: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees?: number;
  /**
   * The amount of asset that the user is swapping to
   */
  to_amount: string;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: any[];
}

export interface SwapOrderSubmittedProperties {
  /**
   * The amount of asset that the user is swapping from
   */
  from_amount: string;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name Asset Ticker Policy ID
   *  \[
   *   {
   *     asset_name: 'ADA',
   *     asset_ticker: 'ADA',
   *     policy_id: '123456789'
   *   },
   * \]
   */
  from_asset: any[];
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type?: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance?: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees?: number;
  /**
   * The amount of asset that the user is swapping to
   */
  to_amount: string;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: any[];
}

export interface SwapSlippageChangedProperties {
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance: number;
}

export interface SendProperties {
  /**
   * Total numbers of assets to be send
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  asset_count: number;
  /**
   * ```
   * nfts: [
   *      {
   *         nft_name: Bored Ape,
   *
   *       },
   *       {
   *         nft_name: Crypto Cats,
   *        }
   * ]
   * ```
   */
  nfts?: any[];
  /**
   * ```
   * Tokens: [
   *      {
   *         token_name: Ado,
   *         token_amount: '133',
   *       },
   *       {
   *         token_name: Ada,
   *         token_amount: '5',
   *        }
   * ]
   * ```
   */
  tokens?: any[];
}

export interface SwapProperties {
  /**
   * The amount of asset that the user is swapping from
   */
  from_amount: string;
  /**
   * Displaying the asset that the user chose to trade with.
   *
   * Asset Name Asset Ticker Policy ID
   *  \[
   *   {
   *     asset_name: 'ADA',
   *     asset_ticker: 'ADA',
   *     policy_id: '123456789'
   *   },
   * \]
   */
  from_asset: any[];
  /**
   * The type of order selected on a given transaction
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | limit, market |
   */
  order_type?: "limit" | "market";
  /**
   * The name of liquidity pool used for this swap transaction
   */
  pool_source: string;
  /**
   * The default slippage tolerance is 1%, but users are free to change the slippage.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  slippage_tolerance?: number;
  /**
   * The amount of fees charged on the transaction. The value is in ADA.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  swap_fees?: number;
  /**
   * The amount of asset that the user is swapping to
   */
  to_amount: string;
  /**
   * Displaying the asset that the user chose to trade to
   *
   * Asset Name
   * Asset Ticker
   * Policy ID
   */
  to_asset: any[];
}

export class AllWalletsPageViewed implements BaseEvent {
  event_type = 'All Wallets Page Viewed';
}

export class AssetsPageViewed implements BaseEvent {
  event_type = 'Assets Page Viewed';
}

export class CreateWalletDetailsSettled implements BaseEvent {
  event_type = 'Create Wallet Details Settled';
}

export class CreateWalletDetailsStepViewed implements BaseEvent {
  event_type = 'Create Wallet Details Step Viewed';
}

export class CreateWalletDetailsSubmitted implements BaseEvent {
  event_type = 'Create Wallet Details Submitted';
}

export class CreateWalletLanguagePageViewed implements BaseEvent {
  event_type = 'Create Wallet Language Page Viewed';
}

export class CreateWalletLearnPhraseStepViewed implements BaseEvent {
  event_type = 'Create Wallet Learn Phrase Step Viewed';
}

export class CreateWalletSavePhraseStepViewed implements BaseEvent {
  event_type = 'Create Wallet Save Phrase Step Viewed';
}

export class CreateWalletSelectMethodPageViewed implements BaseEvent {
  event_type = 'Create Wallet Select Method Page Viewed';
}

export class CreateWalletTermsPageViewed implements BaseEvent {
  event_type = 'Create Wallet Terms Page Viewed';
}

export class CreateWalletVerifyPhraseStepViewed implements BaseEvent {
  event_type = 'Create Wallet Verify Phrase Step Viewed';
}

export class CreateWalletVerifyPhraseWordSelected implements BaseEvent {
  event_type = 'Create Wallet Verify Phrase Word Selected';

  constructor(
    public event_properties?: CreateWalletVerifyPhraseWordSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class DappPopupSignTransactionPageViewed implements BaseEvent {
  event_type = 'Dapp Popup Sign Transaction Page Viewed';
}

export class DappPopupSignTransactionSubmitted implements BaseEvent {
  event_type = 'Dapp Popup Sign Transaction Submitted';
}

export class DiscoverConnectedBottomSheetDisconnectClicked implements BaseEvent {
  event_type = 'Discover Connected Bottom Sheet Disconnect Clicked';
}

export class DiscoverConnectedBottomSheetOpenDAppClicked implements BaseEvent {
  event_type = 'Discover Connected Bottom Sheet Open DApp Clicked';
}

export class DiscoverConnectedDAppItemClicked implements BaseEvent {
  event_type = 'Discover Connected DApp Item Clicked';
}

export class DiscoverDAppItemClicked implements BaseEvent {
  event_type = 'Discover DApp Item Clicked';
}

export class DiscoverFilterSelected implements BaseEvent {
  event_type = 'Discover Filter Selected';

  constructor(
    public event_properties: DiscoverFilterSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class DiscoverPageViewed implements BaseEvent {
  event_type = 'Discover Page Viewed';
}

export class DiscoverSearchActivated implements BaseEvent {
  event_type = 'Discover Search Activated';

  constructor(
    public event_properties: DiscoverSearchActivatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class DiscoverWebViewBottomSheetConnectClicked implements BaseEvent {
  event_type = 'Discover Web View Bottom Sheet Connect Clicked';
}

export class DiscoverWebViewCloseClicked implements BaseEvent {
  event_type = 'Discover Web View Close Clicked';
}

export class DiscoverWebViewTabBarBackwardClicked implements BaseEvent {
  event_type = 'Discover Web View Tab Bar Backward Clicked';
}

export class DiscoverWebViewTabBarForwardClicked implements BaseEvent {
  event_type = 'Discover Web View Tab Bar Forward Clicked';
}

export class DiscoverWebViewTabBarRefreshClicked implements BaseEvent {
  event_type = 'Discover Web View Tab Bar Refresh Clicked';
}

export class DiscoverWebViewTabBarShareClicked implements BaseEvent {
  event_type = 'Discover Web View Tab Bar Share Clicked';
}

export class DiscoverWebViewTabClicked implements BaseEvent {
  event_type = 'Discover Web View Tab Clicked';
}

export class DiscoverWebViewToolbarSearchActivated implements BaseEvent {
  event_type = 'Discover Web View Toolbar Search Activated';

  constructor(
    public event_properties: DiscoverWebViewToolbarSearchActivatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class DiscoverWebViewViewed implements BaseEvent {
  event_type = 'Discover Web View Viewed';
}

export class ExchangePageViewed implements BaseEvent {
  event_type = 'Exchange Page Viewed';
}

export class ExchangeSubmitted implements BaseEvent {
  event_type = 'Exchange Submitted';

  constructor(
    public event_properties: ExchangeSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class GovernanceChooseDrepPageViewed implements BaseEvent {
  event_type = 'Governance Choose Drep Page Viewed';
}

export class GovernanceConfirmTransactionPageViewed implements BaseEvent {
  event_type = 'Governance Confirm Transaction Page Viewed';

  constructor(
    public event_properties: GovernanceConfirmTransactionPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class GovernanceDashboardPageViewed implements BaseEvent {
  event_type = 'Governance Dashboard Page Viewed';
}

export class GovernanceTransactionSuccessPageViewed implements BaseEvent {
  event_type = 'Governance Transaction Success Page Viewed';

  constructor(
    public event_properties: GovernanceTransactionSuccessPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class MenuPageViewed implements BaseEvent {
  event_type = 'Menu Page Viewed';
}

export class NetworkSelected implements BaseEvent {
  event_type = 'Network Selected';

  constructor(
    public event_properties: NetworkSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class NftGalleryDetailsImageViewed implements BaseEvent {
  event_type = 'NFT Gallery Details Image Viewed';
}

export class NftGalleryDetailsPageViewed implements BaseEvent {
  event_type = 'NFT Gallery Details Page Viewed';
}

export class NftGalleryDetailsTab implements BaseEvent {
  event_type = 'NFT Gallery Details Tab';

  constructor(
    public event_properties: NftGalleryDetailsTabProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class NftGalleryPageViewed implements BaseEvent {
  event_type = 'NFT Gallery Page Viewed';

  constructor(
    public event_properties: NftGalleryPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class NftGallerySearchActivated implements BaseEvent {
  event_type = 'NFT Gallery Search Activated';

  constructor(
    public event_properties: NftGallerySearchActivatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class PortfolioDashboardPageViewed implements BaseEvent {
  event_type = 'Portfolio Dashboard Page Viewed';
}

export class PortfolioTokenDetails implements BaseEvent {
  event_type = 'Portfolio Token Details';

  constructor(
    public event_properties: PortfolioTokenDetailsProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class PortfolioTokensListPageViewed implements BaseEvent {
  event_type = 'Portfolio Tokens List Page Viewed';

  constructor(
    public event_properties: PortfolioTokensListPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class PortfolioTokensListSearchActivated implements BaseEvent {
  event_type = 'Portfolio Tokens List Search Activated';

  constructor(
    public event_properties: PortfolioTokensListSearchActivatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ReceiveAmountGeneratedPageViewed implements BaseEvent {
  event_type = 'Receive Amount Generated Page Viewed';

  constructor(
    public event_properties: ReceiveAmountGeneratedPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ReceiveAmountPageViewed implements BaseEvent {
  event_type = 'Receive Amount Page Viewed';
}

export class ReceiveCopyAddressClicked implements BaseEvent {
  event_type = 'Receive Copy Address Clicked';

  constructor(
    public event_properties: ReceiveCopyAddressClickedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ReceiveGenerateNewAddressClicked implements BaseEvent {
  event_type = 'Receive Generate New Address Clicked';
}

export class ReceivePageListViewed implements BaseEvent {
  event_type = 'Receive Page List Viewed';
}

export class ReceivePageViewed implements BaseEvent {
  event_type = 'Receive Page Viewed';
}

export class ReceiveShareAddressClicked implements BaseEvent {
  event_type = 'Receive Share Address Clicked';
}

export class RestoreWalletDetailsSettled implements BaseEvent {
  event_type = 'Restore Wallet Details Settled';
}

export class RestoreWalletDetailsStepViewed implements BaseEvent {
  event_type = 'Restore Wallet Details Step Viewed';
}

export class RestoreWalletEnterPhraseStepStatus implements BaseEvent {
  event_type = 'Restore Wallet Enter Phrase Step Status';

  constructor(
    public event_properties: RestoreWalletEnterPhraseStepStatusProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class RestoreWalletEnterPhraseStepViewed implements BaseEvent {
  event_type = 'Restore Wallet Enter Phrase Step Viewed';

  constructor(
    public event_properties: RestoreWalletEnterPhraseStepViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class RestoreWalletTypeStepViewed implements BaseEvent {
  event_type = 'Restore Wallet Type Step Viewed';
}

export class SendInitiated implements BaseEvent {
  event_type = 'Send Initiated';
}

export class SendSelectAssetPageViewed implements BaseEvent {
  event_type = 'Send Select Asset Page Viewed';
}

export class SendSelectAssetSelected implements BaseEvent {
  event_type = 'Send Select Asset Selected';

  constructor(
    public event_properties: SendSelectAssetSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendSelectAssetUpdated implements BaseEvent {
  event_type = 'Send Select Asset Updated';

  constructor(
    public event_properties: SendSelectAssetUpdatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendSummaryPageViewed implements BaseEvent {
  event_type = 'Send Summary Page Viewed';

  constructor(
    public event_properties: SendSummaryPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SendSummarySubmitted implements BaseEvent {
  event_type = 'Send Summary Submitted';

  constructor(
    public event_properties: SendSummarySubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SettingsPageViewed implements BaseEvent {
  event_type = 'Settings Page Viewed';
}

export class StakingCenterPageViewed implements BaseEvent {
  event_type = 'Staking Center Page Viewed';
}

export class SwapAssetFromChanged implements BaseEvent {
  event_type = 'Swap Asset From Changed';

  constructor(
    public event_properties: SwapAssetFromChangedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapAssetToChanged implements BaseEvent {
  event_type = 'Swap Asset To Changed';

  constructor(
    public event_properties: SwapAssetToChangedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapCancelationSubmitted implements BaseEvent {
  event_type = 'Swap Cancelation Submitted';

  constructor(
    public event_properties: SwapCancelationSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapConfirmedPageViewed implements BaseEvent {
  event_type = 'Swap Confirmed  Page Viewed';

  constructor(
    public event_properties: SwapConfirmedPageViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapInitiated implements BaseEvent {
  event_type = 'Swap Initiated';

  constructor(
    public event_properties: SwapInitiatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapOrderSelected implements BaseEvent {
  event_type = 'Swap Order Selected';

  constructor(
    public event_properties: SwapOrderSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapOrderSubmitted implements BaseEvent {
  event_type = 'Swap Order Submitted';

  constructor(
    public event_properties: SwapOrderSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SwapPoolChanged implements BaseEvent {
  event_type = 'Swap Pool Changed';
}

export class SwapSlippageChanged implements BaseEvent {
  event_type = 'Swap Slippage Changed';

  constructor(
    public event_properties: SwapSlippageChangedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class TransactionsPageViewed implements BaseEvent {
  event_type = 'Transactions Page Viewed';
}

export class VotingPageViewed implements BaseEvent {
  event_type = 'Voting Page Viewed';
}

export class WalletPageBuyBannerClicked implements BaseEvent {
  event_type = 'Wallet Page Buy Banner Clicked';
}

export class WalletPageExchangeBottomSheetClicked implements BaseEvent {
  event_type = 'Wallet Page Exchange Bottom Sheet Clicked';
}

export class WalletPageExchangeClicked implements BaseEvent {
  event_type = 'Wallet Page Exchange Clicked';
}

export class WalletPageViewed implements BaseEvent {
  event_type = 'Wallet Page Viewed';
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: ReactNativeClient;

  get client(): ReactNativeClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already initialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();

    return this.amplitude!.identify(amplitudeIdentify, options);
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * Flush pending events.
   */
  flush(): PromiseResult<void> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * All Wallets Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/All%20Wallets%20Page%20Viewed)
   *
   * This event tracks when a user views the All Wallets page on Menu. Note: only available on Yoroi Mobile.
   *
   * @param options Amplitude event options.
   */
  allWalletsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new AllWalletsPageViewed(), options);
  }

  /**
   * Assets Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Assets%20Page%20Viewed)
   *
   * This event tracks when a user views the Assets page. 
   *  On mobile  is available on the wallet page (First item from main menu) in the assets tab.
   *
   * @param options Amplitude event options.
   */
  assetsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new AssetsPageViewed(), options);
  }

  /**
   * Create Wallet Details Settled
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Details%20Settled)
   *
   * When the wallet is created correctly. This event signifies the completion of the process of setting up wallet details during the creation of a new wallet
   *
   * @param options Amplitude event options.
   */
  createWalletDetailsSettled(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletDetailsSettled(), options);
  }

  /**
   * Create Wallet Details Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Details%20Step%20Viewed)
   *
   * This event tracks when a user views the details \*\*step 4\*\* while creating a wallet. User will introduce: \* Wallet Name \* Password \* Repeat Password
   *
   * @param options Amplitude event options.
   */
  createWalletDetailsStepViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletDetailsStepViewed(), options);
  }

  /**
   * Create Wallet Details Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Details%20Submitted)
   *
   * This event captures the submission of the wallet creation on the last step of the flow (\*\*step 4\*\*).
   *
   * @param options Amplitude event options.
   */
  createWalletDetailsSubmitted(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletDetailsSubmitted(), options);
  }

  /**
   * Create Wallet Language Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Language%20Page%20Viewed)
   *
   * This event tracks when a user views the page for selecting the language during the wallet creation process on the first time he launch Yoroi.
   *
   * @param options Amplitude event options.
   */
  createWalletLanguagePageViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletLanguagePageViewed(), options);
  }

  /**
   * Create Wallet Learn Phrase Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Learn%20Phrase%20Step%20Viewed)
   *
   * This event tracks when a user view the \*\*first step\*\* of learn about recovery prhase
   *
   * @param options Amplitude event options.
   */
  createWalletLearnPhraseStepViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletLearnPhraseStepViewed(), options);
  }

  /**
   * Create Wallet Save Phrase Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Save%20Phrase%20Step%20Viewed)
   *
   * This event tracks when a user views the \*\*second step\*\* to save their wallet recovery phrase during the wallet creation process
   *
   * @param options Amplitude event options.
   */
  createWalletSavePhraseStepViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletSavePhraseStepViewed(), options);
  }

  /**
   * Create Wallet Select Method Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Select%20Method%20Page%20Viewed)
   *
   * This event tracks when a user views the page where they can select the method to create a wallet: 
   *
   * \* Create new wallet 
   *
   * \* Restore existing wallet 
   *
   * This event tracks when a user views the page where they can select the method to create a wallet\* Connect hardware wallet
   *
   * @param options Amplitude event options.
   */
  createWalletSelectMethodPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletSelectMethodPageViewed(), options);
  }

  /**
   * Create Wallet Terms Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Terms%20Page%20Viewed)
   *
   * This event tracks when a user views the terms of service agreement page on the creation wallet flow
   *
   * @param options Amplitude event options.
   */
  createWalletTermsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletTermsPageViewed(), options);
  }

  /**
   * Create Wallet Verify Phrase Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Verify%20Phrase%20Step%20Viewed)
   *
   * This event tracks when a user views the verification phrase step while creating a wallet
   *
   * @param options Amplitude event options.
   */
  createWalletVerifyPhraseStepViewed(
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletVerifyPhraseStepViewed(), options);
  }

  /**
   * Create Wallet Verify Phrase Word Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Create%20Wallet%20Verify%20Phrase%20Word%20Selected)
   *
   * This event tracks the selection of a specific word during the process of verifying the recovery phrase when creating a wallet
   *
   * @param properties The event's properties (e.g. recovery_word_order)
   * @param options Amplitude event options.
   */
  createWalletVerifyPhraseWordSelected(
    properties?: CreateWalletVerifyPhraseWordSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new CreateWalletVerifyPhraseWordSelected(properties), options);
  }

  /**
   * Dapp Popup Sign Transaction Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Dapp%20Popup%20Sign%20Transaction%20Page%20Viewed)
   *
   * This event tracks when a user loads a sign transaction screen on the dapp connector. Valid for extension and mobile.
   *
   * @param options Amplitude event options.
   */
  dappPopupSignTransactionPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new DappPopupSignTransactionPageViewed(), options);
  }

  /**
   * Dapp Popup Sign Transaction Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Dapp%20Popup%20Sign%20Transaction%20Submitted)
   *
   * This event tracks the submission of a sign transaction request within the Dapp Connector screen. It's a Popup on extension and a full screen in Mobile.
   *
   * @param options Amplitude event options.
   */
  dappPopupSignTransactionSubmitted(
    options?: EventOptions,
  ) {
    return this.track(new DappPopupSignTransactionSubmitted(), options);
  }

  /**
   * Discover Connected Bottom Sheet Disconnect Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Connected%20Bottom%20Sheet%20Disconnect%20Clicked)
   *
   * This event tracks when a user clicks on the disconnect DApp button on the bottom sheet implementation of a DApp that is already connected.
   *
   * @param options Amplitude event options.
   */
  discoverConnectedBottomSheetDisconnectClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverConnectedBottomSheetDisconnectClicked(), options);
  }

  /**
   * Discover Connected Bottom Sheet Open DApp Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Connected%20Bottom%20Sheet%20Open%20DApp%20Clicked)
   *
   * This event tracks when a user clicks on the open DApp button on the bottom sheet implementation of a DApp that is already connected.
   *
   * @param options Amplitude event options.
   */
  discoverConnectedBottomSheetOpenDAppClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverConnectedBottomSheetOpenDAppClicked(), options);
  }

  /**
   * Discover Connected DApp Item Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Connected%20DApp%20Item%20Clicked)
   *
   * This event tracks when a user clicks on a DApp list item that is already connected to the wallet.
   *
   * @param options Amplitude event options.
   */
  discoverConnectedDAppItemClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverConnectedDAppItemClicked(), options);
  }

  /**
   * Discover DApp Item Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20DApp%20Item%20Clicked)
   *
   * This event tracks when a user clicks on a DApp list item.
   *
   * @param options Amplitude event options.
   */
  discoverDAppItemClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverDAppItemClicked(), options);
  }

  /**
   * Discover Filter Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Filter%20Selected)
   *
   * This event tracks when a user applies filter on the dApp Explorer page.
   *
   * @param properties The event's properties (e.g. dapp_filter)
   * @param options Amplitude event options.
   */
  discoverFilterSelected(
    properties: DiscoverFilterSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new DiscoverFilterSelected(properties), options);
  }

  /**
   * Discover Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Page%20Viewed)
   *
   * This event tracks when the dApp Explorer page has loaded all of the recommended dApps.
   *
   * @param options Amplitude event options.
   */
  discoverPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverPageViewed(), options);
  }

  /**
   * Discover Search Activated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Search%20Activated)
   *
   * This event tracks when a user activates and starts a search in the discover page. Delay of 0.5 seconds.
   *
   * @param properties The event's properties (e.g. search_term)
   * @param options Amplitude event options.
   */
  discoverSearchActivated(
    properties: DiscoverSearchActivatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new DiscoverSearchActivated(properties), options);
  }

  /**
   * Discover Web View Bottom Sheet Connect Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Bottom%20Sheet%20Connect%20Clicked)
   *
   * This event tracks when a user attempts to connect their wallet by clicking on "Connect" in the bottom sheet that appears on the integrated web view after the user clicks on “Connect Wallet” on a DApp page.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewBottomSheetConnectClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewBottomSheetConnectClicked(), options);
  }

  /**
   * Discover Web View Close Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Close%20Clicked)
   *
   * This event tracks when a user clicks the close icon on the integrated web view to close the webview.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewCloseClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewCloseClicked(), options);
  }

  /**
   * Discover Web View Tab Bar Backward Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Tab%20Bar%20Backward%20Clicked)
   *
   * This event tracks when a user clicks the backward button on the integrated web view.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewTabBarBackwardClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewTabBarBackwardClicked(), options);
  }

  /**
   * Discover Web View Tab Bar Forward Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Tab%20Bar%20Forward%20Clicked)
   *
   * This event tracks when a user clicks the forward button on the integrated web view.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewTabBarForwardClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewTabBarForwardClicked(), options);
  }

  /**
   * Discover Web View Tab Bar Refresh Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Tab%20Bar%20Refresh%20Clicked)
   *
   * This event tracks when a user clicks the refresh button on the integrated web view.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewTabBarRefreshClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewTabBarRefreshClicked(), options);
  }

  /**
   * Discover Web View Tab Bar Share Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Tab%20Bar%20Share%20Clicked)
   *
   * This event tracks when a user clicks the share button on the integrated web view.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewTabBarShareClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewTabBarShareClicked(), options);
  }

  /**
   * Discover Web View Tab Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Tab%20Clicked)
   *
   * This event tracks when a user clicks the tab button on the integrated web view to open the tab manager.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewTabClicked(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewTabClicked(), options);
  }

  /**
   * Discover Web View Toolbar Search Activated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Toolbar%20Search%20Activated)
   *
   * This event tracks when a user activates and starts a search in the webview’s tool bar.
   *
   * @param properties The event's properties (e.g. search_term)
   * @param options Amplitude event options.
   */
  discoverWebViewToolbarSearchActivated(
    properties: DiscoverWebViewToolbarSearchActivatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewToolbarSearchActivated(properties), options);
  }

  /**
   * Discover Web View Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Discover%20Web%20View%20Viewed)
   *
   * This event tracks when a user loads the integrated web view containing a DApp website.
   *
   * @param options Amplitude event options.
   */
  discoverWebViewViewed(
    options?: EventOptions,
  ) {
    return this.track(new DiscoverWebViewViewed(), options);
  }

  /**
   * Exchange Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Exchange%20Page%20Viewed)
   *
   * This event tracks when a user loads the default state of the first step of the fiat on/off ramp on the new Banxa flow. That screen shows input ADA Amount, with the BUY ADA option selected by default.
   *
   * @param options Amplitude event options.
   */
  exchangePageViewed(
    options?: EventOptions,
  ) {
    return this.track(new ExchangePageViewed(), options);
  }

  /**
   * Exchange Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Exchange%20Submitted)
   *
   * This event tracks when a user clicks on "Proceed" in the Exchange page.
   *
   * @param properties The event's properties (e.g. ada_amount)
   * @param options Amplitude event options.
   */
  exchangeSubmitted(
    properties: ExchangeSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ExchangeSubmitted(properties), options);
  }

  /**
   * Governance Choose Drep Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Governance%20Choose%20Drep%20Page%20Viewed)
   *
   * This event tracks when user loads the bottom sheet on mobile or the popup on extension to introduce the Drep ID. To arrive to this page the user has to click on “Delegate to a Drep” section.
   *
   * @param options Amplitude event options.
   */
  governanceChooseDrepPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new GovernanceChooseDrepPageViewed(), options);
  }

  /**
   * Governance Confirm Transaction Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Governance%20Confirm%20Transaction%20Page%20Viewed)
   *
   * This event tracks when a user loads the confirm transaction page on the Governance flow. On Extension user would insert the password in that page. On extension user would do it in a bottom sheet afterwards.
   *
   * @param properties The event's properties (e.g. governance_selection)
   * @param options Amplitude event options.
   */
  governanceConfirmTransactionPageViewed(
    properties: GovernanceConfirmTransactionPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new GovernanceConfirmTransactionPageViewed(properties), options);
  }

  /**
   * Governance Dashboard Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Governance%20Dashboard%20Page%20Viewed)
   *
   * This event tracks when a user loads the Governance Dashboard Page. The page is reached via the main navigation menu in extension and in the bottom menu icon on Extension.
   *
   * @param options Amplitude event options.
   */
  governanceDashboardPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new GovernanceDashboardPageViewed(), options);
  }

  /**
   * Governance Transaction Success Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Governance%20Transaction%20Success%20Page%20Viewed)
   *
   * This event tracks when a user loads the success page at the end of the governance flow.
   *
   * @param properties The event's properties (e.g. governance_selection)
   * @param options Amplitude event options.
   */
  governanceTransactionSuccessPageViewed(
    properties: GovernanceTransactionSuccessPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new GovernanceTransactionSuccessPageViewed(properties), options);
  }

  /**
   * Menu Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Menu%20Page%20Viewed)
   *
   * This event is triggered when a user views the menu page within the application. Only available on Mobile. 
   *  The menu page is accesible via the bottom navigation page (last item on the right)
   *
   * @param options Amplitude event options.
   */
  menuPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new MenuPageViewed(), options);
  }

  /**
   * Network Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Network%20Selected)
   *
   * Event to track when a user selects a network
   *
   * @param properties The event's properties (e.g. from_network)
   * @param options Amplitude event options.
   */
  networkSelected(
    properties: NetworkSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new NetworkSelected(properties), options);
  }

  /**
   * NFT Gallery Details Image Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Details%20Image%20Viewed)
   *
   * This event tracks when a user views the NFT image at full screen
   *
   * @param options Amplitude event options.
   */
  nftGalleryDetailsImageViewed(
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryDetailsImageViewed(), options);
  }

  /**
   * NFT Gallery Details Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Details%20Page%20Viewed)
   *
   * This event tracks when a user views the details page of an NFT item.
   *
   * @param options Amplitude event options.
   */
  nftGalleryDetailsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryDetailsPageViewed(), options);
  }

  /**
   * NFT Gallery Details Tab
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Details%20Tab)
   *
   * This event tracks user interactions with the tab in the NFT Gallery details page. It provides insights into how users engage with specific details of NFTs, such as descriptions, attributes, or additional information
   *
   * @param properties The event's properties (e.g. nft_tab)
   * @param options Amplitude event options.
   */
  nftGalleryDetailsTab(
    properties: NftGalleryDetailsTabProperties,
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryDetailsTab(properties), options);
  }

  /**
   * NFT Gallery Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Page%20Viewed)
   *
   * This event tracks when the NFT gallery it has loaded all nfts metadata
   *
   * @param properties The event's properties (e.g. nft_count)
   * @param options Amplitude event options.
   */
  nftGalleryPageViewed(
    properties: NftGalleryPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new NftGalleryPageViewed(properties), options);
  }

  /**
   * NFT Gallery Search Activated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/NFT%20Gallery%20Search%20Activated)
   *
   * User activates and starts a search in the NFT gallery. Delay of 0.5 seconds.
   *
   * @param properties The event's properties (e.g. nft_count)
   * @param options Amplitude event options.
   */
  nftGallerySearchActivated(
    properties: NftGallerySearchActivatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new NftGallerySearchActivated(properties), options);
  }

  /**
   * Portfolio Dashboard Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Portfolio%20Dashboard%20Page%20Viewed)
   *
   * When user loads the Porfolio Dashboard, only on mobile at the moment. That Page Dhas 3 sections, The total portfolio valie, Tokens section and NFT section
   *
   * @param options Amplitude event options.
   */
  portfolioDashboardPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new PortfolioDashboardPageViewed(), options);
  }

  /**
   * Portfolio Token Details
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Portfolio%20Token%20Details)
   *
   * When user visit the detailed information about a specific token within a user's portfolio. In mobile there's 3 tabs that would be implemented in different iterations.
   *
   * @param properties The event's properties (e.g. token_details_tab)
   * @param options Amplitude event options.
   */
  portfolioTokenDetails(
    properties: PortfolioTokenDetailsProperties,
    options?: EventOptions,
  ) {
    return this.track(new PortfolioTokenDetails(properties), options);
  }

  /**
   * Portfolio Tokens List Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Portfolio%20Tokens%20List%20Page%20Viewed)
   *
   * Event to track when a user views the list of tokens in their portfolio.
   *
   * @param properties The event's properties (e.g. tokens_tab)
   * @param options Amplitude event options.
   */
  portfolioTokensListPageViewed(
    properties: PortfolioTokensListPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new PortfolioTokensListPageViewed(properties), options);
  }

  /**
   * Portfolio Tokens List Search Activated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Portfolio%20Tokens%20List%20Search%20Activated)
   *
   * This event tracks when a user activates and starts a search in the Tokens list page. Delay of 0.5 seconds.
   *
   * @param properties The event's properties (e.g. search_term)
   * @param options Amplitude event options.
   */
  portfolioTokensListSearchActivated(
    properties: PortfolioTokensListSearchActivatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new PortfolioTokensListSearchActivated(properties), options);
  }

  /**
   * Receive Amount Generated Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Amount%20Generated%20Page%20Viewed)
   *
   * When the bottom sheet or popup with a generated address with an specific amount is loaded
   *
   * @param properties The event's properties (e.g. ada_amount)
   * @param options Amplitude event options.
   */
  receiveAmountGeneratedPageViewed(
    properties: ReceiveAmountGeneratedPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ReceiveAmountGeneratedPageViewed(properties), options);
  }

  /**
   * Receive Amount Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Amount%20Page%20Viewed)
   *
   * When a user visit the page to insert specific amount of ADA that would be needed to generate a wallet address with that specific details.
   *
   * @param options Amplitude event options.
   */
  receiveAmountPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new ReceiveAmountPageViewed(), options);
  }

  /**
   * Receive Copy Address Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Copy%20Address%20Clicked)
   *
   * When a user click on the any CTA to copy their address
   *
   * @param properties The event's properties (e.g. copy_address_location)
   * @param options Amplitude event options.
   */
  receiveCopyAddressClicked(
    properties: ReceiveCopyAddressClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ReceiveCopyAddressClicked(properties), options);
  }

  /**
   * Receive Generate New Address Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Generate%20New%20Address%20Clicked)
   *
   * When a user click on the Generate new address button on the main receive page on the multiple address flow.
   *
   * @param options Amplitude event options.
   */
  receiveGenerateNewAddressClicked(
    options?: EventOptions,
  ) {
    return this.track(new ReceiveGenerateNewAddressClicked(), options);
  }

  /**
   * Receive Page List Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Page%20List%20Viewed)
   *
   * When user has enabled multiple addresses and goes to the page where he can see the list of generated wallet addresses
   *
   * @param options Amplitude event options.
   */
  receivePageListViewed(
    options?: EventOptions,
  ) {
    return this.track(new ReceivePageListViewed(), options);
  }

  /**
   * Receive Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Page%20Viewed)
   *
   * When user loads the Receive funds screen, where user can see their wallet address with a QR Code
   *
   * @param options Amplitude event options.
   */
  receivePageViewed(
    options?: EventOptions,
  ) {
    return this.track(new ReceivePageViewed(), options);
  }

  /**
   * Receive Share Address Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Receive%20Share%20Address%20Clicked)
   *
   * When a user click on the link to share the address
   *
   * @param options Amplitude event options.
   */
  receiveShareAddressClicked(
    options?: EventOptions,
  ) {
    return this.track(new ReceiveShareAddressClicked(), options);
  }

  /**
   * Restore Wallet Details Settled
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Restore%20Wallet%20Details%20Settled)
   *
   * This event captures the details of a wallet restoration process that has been successfully completed
   *
   * @param options Amplitude event options.
   */
  restoreWalletDetailsSettled(
    options?: EventOptions,
  ) {
    return this.track(new RestoreWalletDetailsSettled(), options);
  }

  /**
   * Restore Wallet Details Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Restore%20Wallet%20Details%20Step%20Viewed)
   *
   * Track when user loads the page where user inserts wallet name and password
   *
   * @param options Amplitude event options.
   */
  restoreWalletDetailsStepViewed(
    options?: EventOptions,
  ) {
    return this.track(new RestoreWalletDetailsStepViewed(), options);
  }

  /**
   * Restore Wallet Enter Phrase Step Status
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Restore%20Wallet%20Enter%20Phrase%20Step%20Status)
   *
   * This events tracks the validation of the recovery phrase is verified, once the user insert the latest word. The output can be positive or negative and we do save that in he property: recovery*prhase*status
   *
   * @param properties The event's properties (e.g. recovery_prhase_status)
   * @param options Amplitude event options.
   */
  restoreWalletEnterPhraseStepStatus(
    properties: RestoreWalletEnterPhraseStepStatusProperties,
    options?: EventOptions,
  ) {
    return this.track(new RestoreWalletEnterPhraseStepStatus(properties), options);
  }

  /**
   * Restore Wallet Enter Phrase Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Restore%20Wallet%20Enter%20Phrase%20Step%20Viewed)
   *
   * This event tracks when a user views the step to enter the recovery phrase while restoring a wallet (**Step 2**).
   *
   * @param properties The event's properties (e.g. recovery_phrase_lenght)
   * @param options Amplitude event options.
   */
  restoreWalletEnterPhraseStepViewed(
    properties: RestoreWalletEnterPhraseStepViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new RestoreWalletEnterPhraseStepViewed(properties), options);
  }

  /**
   * Restore Wallet Type Step Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Restore%20Wallet%20Type%20Step%20Viewed)
   *
   * This event tracks when a user views the **first step after** selecting restore wallet, were they have to choose between:
   *
   * * 15-word recovery phrase
   *
   * * 24-word recovery phrase
   *
   * @param options Amplitude event options.
   */
  restoreWalletTypeStepViewed(
    options?: EventOptions,
  ) {
    return this.track(new RestoreWalletTypeStepViewed(), options);
  }

  /**
   * Send Initiated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Initiated)
   *
   * This event tracks when a user loads the default state of the first step of the multiasset transaction flow. That screen shows receiver address and optional memo
   *
   * @param options Amplitude event options.
   */
  sendInitiated(
    options?: EventOptions,
  ) {
    return this.track(new SendInitiated(), options);
  }

  /**
   * Send Select Asset Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Select%20Asset%20Page%20Viewed)
   *
   * This event tracks when a user views the "Amount" page in the send flow.
   *
   * @param options Amplitude event options.
   */
  sendSelectAssetPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new SendSelectAssetPageViewed(), options);
  }

  /**
   * Send Select Asset Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Select%20Asset%20Selected)
   *
   * When a user click "next" on the send flow: "Amount" step on extension / "Assets added" in mobile
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSelectAssetSelected(
    properties: SendSelectAssetSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSelectAssetSelected(properties), options);
  }

  /**
   * Send Select Asset Updated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Select%20Asset%20Updated)
   *
   * When an user update the tokens selection on "amount" step: 
   *  \- Add 
   *  \- Remove 
   *  \- Updated
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSelectAssetUpdated(
    properties: SendSelectAssetUpdatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSelectAssetUpdated(properties), options);
  }

  /**
   * Send Summary Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Summary%20Page%20Viewed)
   *
   * When a user loads the Preview page (Could be called comfirmation too) on the send flow.
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSummaryPageViewed(
    properties: SendSummaryPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSummaryPageViewed(properties), options);
  }

  /**
   * Send Summary Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Send%20Summary%20Submitted)
   *
   * When a user click "send" on the "Preview" step on the send flow.
   *
   * @param properties The event's properties (e.g. asset_count)
   * @param options Amplitude event options.
   */
  sendSummarySubmitted(
    properties: SendSummarySubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SendSummarySubmitted(properties), options);
  }

  /**
   * Settings Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Settings%20Page%20Viewed)
   *
   * This event tracks when a user views the settings page within the application.
   *
   * @param options Amplitude event options.
   */
  settingsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new SettingsPageViewed(), options);
  }

  /**
   * Staking Center Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Staking%20Center%20Page%20Viewed)
   *
   * This event tracks when a user views the Staking Center page on Staking menu.
   *
   * @param options Amplitude event options.
   */
  stakingCenterPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new StakingCenterPageViewed(), options);
  }

  /**
   * Swap Asset From Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Asset%20From%20Changed)
   *
   * When user changed the selected asset on "From" section
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_asset)
   * @param options Amplitude event options.
   */
  swapAssetFromChanged(
    properties: SwapAssetFromChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapAssetFromChanged(properties), options);
  }

  /**
   * Swap Asset To Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Asset%20To%20Changed)
   *
   * When user changed the selected asset on "To" section
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. to_asset)
   * @param options Amplitude event options.
   */
  swapAssetToChanged(
    properties: SwapAssetToChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapAssetToChanged(properties), options);
  }

  /**
   * Swap Cancelation Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Cancelation%20Submitted)
   *
   * When user sign a transaction to cancel the swap order
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_amount)
   * @param options Amplitude event options.
   */
  swapCancelationSubmitted(
    properties: SwapCancelationSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapCancelationSubmitted(properties), options);
  }

  /**
   * Swap Confirmed  Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Confirmed%20%20Page%20Viewed)
   *
   * When the user opens Completed Order page
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. swap_tab)
   * @param options Amplitude event options.
   */
  swapConfirmedPageViewed(
    properties: SwapConfirmedPageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapConfirmedPageViewed(properties), options);
  }

  /**
   * Swap Initiated
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Initiated)
   *
   * When user clicks on the swap feature and sees the default state of the swap.
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_asset)
   * @param options Amplitude event options.
   */
  swapInitiated(
    properties: SwapInitiatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapInitiated(properties), options);
  }

  /**
   * Swap Order Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Order%20Selected)
   *
   * When user click on "swap" button after selecting asset from, entering the amount of asset form, selecting asset to, entering amount of asset to, and choosing a pool
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_amount)
   * @param options Amplitude event options.
   */
  swapOrderSelected(
    properties: SwapOrderSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapOrderSelected(properties), options);
  }

  /**
   * Swap Order Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Order%20Submitted)
   *
   * When user click confirm on the check out page, after entering their spending password
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. from_amount)
   * @param options Amplitude event options.
   */
  swapOrderSubmitted(
    properties: SwapOrderSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapOrderSubmitted(properties), options);
  }

  /**
   * Swap Pool Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Pool%20Changed)
   *
   * When user clicked a different pool on the "Select Pool" page
   *
   * Owner: Sergio SF
   *
   * @param options Amplitude event options.
   */
  swapPoolChanged(
    options?: EventOptions,
  ) {
    return this.track(new SwapPoolChanged(), options);
  }

  /**
   * Swap Slippage Changed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Swap%20Slippage%20Changed)
   *
   * When user click apply on the swap setting page
   *
   * Owner: Omar Rozak
   *
   * @param properties The event's properties (e.g. slippage_tolerance)
   * @param options Amplitude event options.
   */
  swapSlippageChanged(
    properties: SwapSlippageChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SwapSlippageChanged(properties), options);
  }

  /**
   * Transactions Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Transactions%20Page%20Viewed)
   *
   * This event tracks when a user views the transactions page within the wallet. On mobile is available on the wallet page (First item from main navigation item) in the transactions tab.
   *
   * @param options Amplitude event options.
   */
  transactionsPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new TransactionsPageViewed(), options);
  }

  /**
   * Voting Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Voting%20Page%20Viewed)
   *
   * This event tracks when a user views the Catalyst Voting page.
   *
   * @param options Amplitude event options.
   */
  votingPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new VotingPageViewed(), options);
  }

  /**
   * Wallet Page Buy Banner Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Wallet%20Page%20Buy%20Banner%20Clicked)
   *
   * This event tracks when a user clicks on "Buy Button" on the Wallet Page’s BUY ADA banner.
   *
   * This banner only appears for **new users** or those **users that has 0 ADA** Balance.
   *
   * @param options Amplitude event options.
   */
  walletPageBuyBannerClicked(
    options?: EventOptions,
  ) {
    return this.track(new WalletPageBuyBannerClicked(), options);
  }

  /**
   * Wallet Page Exchange Bottom Sheet Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Wallet%20Page%20Exchange%20Bottom%20Sheet%20Clicked)
   *
   * This event tracks when a user clicks on "Proceed" in the bottom sheet that appears after the user clicks on "Buy" on the Wallet Page.
   *
   * @param options Amplitude event options.
   */
  walletPageExchangeBottomSheetClicked(
    options?: EventOptions,
  ) {
    return this.track(new WalletPageExchangeBottomSheetClicked(), options);
  }

  /**
   * Wallet Page Exchange Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Wallet%20Page%20Exchange%20Clicked)
   *
   * This event tracks when a user clicks on "Buy" on the Wallet Page.
   *
   * @param options Amplitude event options.
   */
  walletPageExchangeClicked(
    options?: EventOptions,
  ) {
    return this.track(new WalletPageExchangeClicked(), options);
  }

  /**
   * Wallet Page Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/emurgo/Yoroi/events/main/latest/Wallet%20Page%20Viewed)
   *
   * Wallet page is the default page when the user logs into the app and selects the wallet that is going to be using (Once the initial setup is done)
   *
   * @param options Amplitude event options.
   */
  walletPageViewed(
    options?: EventOptions,
  ) {
    return this.track(new WalletPageViewed(), options);
  }
}

export const ampli = new Ampli();
