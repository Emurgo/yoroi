# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

XC_PROJECT="./ios/yoroi.xcodeproj"
XC_WORKSPACE="./ios/yoroi.xcworkspace"

PLIST="yoroi/Info.plist"

NIGHTLY_BUNDLE_ID="com.emurgo.yoroi-nightly"
NIGHTLY_APP_NAME="Yoroi Nightly"

PROD_BUNDLE_ID="com.emurgo.yoroi"
PROD_APP_NAME="Yoroi"

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :ios_nightly do
    update_app_identifier(
      xcodeproj: XC_PROJECT, # Optional path to xcodeproj, will use the first .xcodeproj if not set
      plist_path: PLIST, # Path to info plist file, relative to xcodeproj
      app_identifier: NIGHTLY_BUNDLE_ID # The bundle identifier of your app 
    )

    update_info_plist(
      xcodeproj: XC_PROJECT,
      plist_path: PLIST,
      display_name: NIGHTLY_APP_NAME,
    )

    match(app_identifier: NIGHTLY_BUNDLE_ID, type: "appstore")

    api_key = app_store_connect_api_key(
      key_id: "PH9Z89M567",
      issuer_id: "feff08c0-5259-4e9a-bdbe-26cdb046e1d5",
      key_filepath: "~/AuthKey_PH9Z89M567.p8",
      duration: 1200, 
      in_house: false
    )

    increment_build_number(xcodeproj: XC_PROJECT)
    
    begin
      gym(
        scheme: "yoroi", 
        workspace: XC_WORKSPACE,
        silent: true,
        include_bitcode: false,
        include_symbols: true,
        clean: true,
        xcargs: `-UseNewBuildSystem=YES`,
        output_directory: "./ios",
        output_name: "yoroi.ipa",
        export_options: {
          method: "app-store",
          signingStyle: "automatic"
        },
      )
    rescue => e
      xcode_log_path = '~/Library/Logs/gym/yoroi-yoroi.log'
      p "Xcode build failed -> #{xcode_log_path}"
      sh "cat #{xcode_log_path}"

      raise 'Xcode build failed.'
    end

    upload_to_testflight(api_key: api_key, app_identifier: NIGHTLY_BUNDLE_ID, skip_waiting_for_build_processing: true)
  end

  desc "Push a Production Build to App Store"
  lane :ios_prod do
    update_app_identifier(
      xcodeproj: XC_PROJECT, # Optional path to xcodeproj, will use the first .xcodeproj if not set
      plist_path: PLIST, # Path to info plist file, relative to xcodeproj
      app_identifier: PROD_BUNDLE_ID # The bundle identifier of your app 
    )

    update_info_plist(
      xcodeproj: XC_PROJECT,
      plist_path: PLIST,
      display_name: PROD_APP_NAME,
    )

    match(app_identifier: PROD_BUNDLE_ID, type: "appstore")

    api_key = app_store_connect_api_key(
      key_id: "PH9Z89M567",
      issuer_id: "feff08c0-5259-4e9a-bdbe-26cdb046e1d5",
      key_filepath: "~/AuthKey_PH9Z89M567.p8",
      duration: 1200, 
      in_house: false
    )

    increment_build_number(xcodeproj: XC_PROJECT)
    
    begin
      gym(
        scheme: "yoroi", 
        workspace: XC_WORKSPACE,
        silent: true,
        include_bitcode: false,
        include_symbols: true,
        clean: true,
        xcargs: `-UseNewBuildSystem=YES`,
        output_directory: "./ios",
        output_name: "yoroi.ipa",
        export_options: {
          method: "app-store",
          signingStyle: "automatic"
        },
      )
    rescue => e
      xcode_log_path = '~/Library/Logs/gym/yoroi-yoroi.log'
      p "Xcode build failed -> #{xcode_log_path}"
      sh "cat #{xcode_log_path}"

      raise 'Xcode build failed.'
    end

    upload_to_testflight(api_key: api_key, app_identifier: PROD_BUNDLE_ID, skip_waiting_for_build_processing: true)

  end

end

platform :android do
  desc "Push nightly to Android store"
  lane :android_nightly do |options|
    type = options.fetch(:type, "Release")
    task = options[:apk] ? "assemble" : "bundle"

    gradle(task: "clean", project_dir: 'android/')
    gradle(
      task: task,
      build_type: type,
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => "/Users/administrator/.google/nightly.keystore",
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASS"],
        "android.injected.signing.key.alias" => "my-key-alias",
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASS"],
      },
      project_dir: 'android/'
    )
    # upload_to_play_store(
    #   track: 'Nightly' : "internal",
    #   package_name: "com.emurgo.nightly",
    #   json_key: ENV["ANDROID_SERVICE_KEY_PATH"],
    # )

  end
end